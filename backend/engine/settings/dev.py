"""
Django settings for engine project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import time
import datetime
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-zy&+^17emv&s7f5dm++d+2186evs)z#58-+7#1i35rsr5$hxrh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 第三方组件
    'rest_framework',                                       # drf框架
    'corsheaders',                                          # cors跨域子应用
    # 项目app
    'apps.home',
    'apps.users',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',                # cors跨域的中间件
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 最小权限原则
CORS_ORIGIN_WHITELIST = (
    'http://www.education-cloud.com:3000',
)
CORS_ALLOW_CREDENTIALS = False                              # 不允许ajax跨域请求时携带cookie

# 权限比较大
# CORS_ALLOW_ALL_ORIGINS = True                             # 适合多终端情况


ROOT_URLCONF = 'engine.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'engine.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'dj_db_conn_pool.backends.mysql',
        'NAME': 'edu',
        'PORT': 3306,
        'HOST': '10.0.71.53',
        'USER': 'edu',
        'PASSWORD': 'a2CxerxpKuIE9RdCgy5dkIKG',
        'OPTIONS': {
            'charset': 'utf8mb4',               # 连接选项配置,mysql8.0以上无需配置
        },
        'POOL_OPTIONS': {                       # 连接池的配置信息
            'POOL_SIZE': 100,                   # 连接池默认创建的链接对象的数量，这里为100
            'MAX_OVERFLOW': 50,                 # 连接池默认创建的链接对象的最大数量，这里为150
            'RECYCLE': 24 * 60 * 60,            # 连接可以被重复用多久，超过会重新创建，-1表示永久
            'TIMEOUT': 30,                      # 池中没有连接最多等待的时间
        }
    }
}


# redis configration
# 设置redis缓存
CACHES = {
    # 默认缓存
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        # 'LOCATION': 'redis://:密码@IP地址:端口/库编号',
        'LOCATION': 'redis://:{0}@{1}:{2}/{3}'.format('Tk0M4oVn9RP38xo7jY6VlonM', '10.0.71.55', 6379, 0),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {'max_connections': 100},
        }
    },
    # 提供给admin运营站点的session存储
    'session': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://:{0}@{1}:{2}/{3}'.format('Tk0M4oVn9RP38xo7jY6VlonM', '10.0.71.55', 6379, 1),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {'max_connections': 10},
        }
    },
    # 提供存储短信验证码
    'sms_code': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://:{0}@{1}:{2}/{3}'.format('Tk0M4oVn9RP38xo7jY6VlonM', '10.0.71.55', 6379, 2),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {'max_connections': 100},
        }
    }
}

# 设置用户登录admin站点时,记录登录状态的session保存到redis缓存中
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
# 设置session保存的位置对应的缓存配置项
SESSION_CACHE_ALIAS = 'session'


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# 访问静态文件的url地址前缀
STATIC_URL = '/static/'
# 设置django的静态文件目录[手动创建]
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# 项目中存储上传文件的根目录[手动创建]，注意，uploads目录需要手动创建否则上传文件时报错
MEDIA_ROOT = BASE_DIR / 'uploads'
# 访问上传文件的url地址前缀
MEDIA_URL = '/uploads/'


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Log configuration
LOG_PATH = BASE_DIR / 'logs'
LOGGING = {
    'version': 1,
    # 禁用后，第三方模块无法捕获自身出现的异常
    'disable_existing_loggers': False,
    # 日志格式设置，standard或者simple都是自定义的
    'formatters': {
        # 详细格式
        'standard': {
            # 格式定义：https://docs.python.org/3/library/logging.html#logrecord-attributes
            # asctime   发生时间
            # process   进程ID
            # thread    线程ID
            # filename  用户名
            # lineno    行号
            # module    模块名
            # funcName  函数名
            # levelname 日志等级
            # message   异常信息
            'format': '[%(asctime)s] [%(process)d:%(thread)d] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s',
        },
        # 简单格式
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    # 过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 日志处理流程
    'handlers': {
        'default': {
            'level': 'INFO',              # 设置当前日志处理流程中的日志最低等级
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_PATH, 'all-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes': 1024 * 1024 * 1,  # 文件大小
            'backupCount': 5,             # 备份数
            'formatter': 'standard',      # 输出格式
            'encoding': 'utf-8',          # 默认编码
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_PATH, 'error-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes': 1024 * 1024 * 1,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        'info': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_PATH, 'info-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes': 1024 * 1024 * 1,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        }
    },
    # 日志处理的命名空间
    'loggers': {
        # 当基于django命名空间写入日志时，调用哪几个日志处理流程
        'django': {
            'handlers': ['default', 'console'],
            'level': 'INFO',
            # 是否在django命名空间对应的日志处理流程结束以后，冒泡通知其他的日志功能。True表示允许
            'propagate': True,
        },
        'log': {
            'handlers': ['error', 'info', 'default', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    }
}

# DRF configuration
REST_FRAMEWORK = {
    # 自定义异常处理
    'EXCEPTION_HANDLER': 'utils.exceptions.custom_exception_handler',
    # 自定义认证
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',  # jwt认证 (优先级最高)
        'rest_framework.authentication.SessionAuthentication',           # session认证
        'rest_framework.authentication.BasicAuthentication',
    ),
}

# jwt认证相关配置项
JWT_AUTH = {
    # 设置jwt的有效期（默认5分钟）
    # 如果内部站点，例如：运维开发系统，OA，往往配置的access_token有效期基本就是15分钟，30分钟，1~2个小时
    'JWT_EXPIRATION_DELTA': datetime.timedelta(weeks=1),                 # 一周有效
}


# 系统认证相关功能，采用自定义用户模型类
# 书写格式 '子应用目录名.模型类'
AUTH_USER_MODEL = 'users.User'
